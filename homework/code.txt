%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%柱状图+折线图：

data = readtable('C:\Users\A\Desktop\2024_happy.csv', 'VariableNamingRule', 'preserve');  
variables = data.Properties.VariableNames(6:end);  % 获取变量名称
X = table2array(data(:, 6:end));  
% 缺失值
disp(any(isnan(X), 1));  % 显示每列是否存在缺失值（NaN）
disp(any(isnan(X), 2));  % 显示每行是否存在缺失值（NaN）
% 删除含有缺失值的行
X_clean = X(~any(isnan(X), 2), :);  % 删除NaN
%数据标准化（z-score标准化）
X_standardized = zscore(X_clean);
% PCA
[coeff, score, latent, ~, explained] = pca(X_standardized);

% 贡献率
cumulative_explained = cumsum(explained); 
%disp(explained);  % 显示每个主成分的解释方差
%disp(cumulative_explained);  % 显示累计解释方差


figure;
% 主成分贡献率的柱状图
bar(explained, 'FaceColor', [0.07, 0.62, 1], 'EdgeColor', 'black', 'LineWidth', 1);  % 蓝色柱状图
hold on;  % 保持图形窗口，以便在同一图中绘制折线图
% 累计贡献率的红色折线图
plot(cumulative_explained, 'r-o', 'Color', [0.94, 0.11, 0.11], 'LineWidth', 1.5, 'LineStyle', '-');  % 红色折线图
% 标题和标签
title('PCA of Happiness Score: Explained Variance and Cumulative Contribution');
xlabel('Principal Component');
ylabel('Variance Explained (%)');
% 图例
legend('Explained Variance', 'Cumulative Contribution');
% 设置x轴刻度
xticks(1:length(explained));
xticklabels(variables(1:length(explained)));  % 使用变量名称作为横坐标标签
% 显示图形
hold off;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%热力图

data = readtable('C:\Users\A\Desktop\2024_happy.csv', 'VariableNamingRule', 'preserve');  
%disp(data.Properties.VariableNames);  
variables = {'Happiness_score', 'Economy_GDP_per_Capita', 'Social_support', ...
             'Healthy_life_expectancy', 'Freedom_to_make_life_choices', ...
             'Generosity', 'Perceptions_of_corruption'};
X = table2array(data(:, variables));
X = X(~any(isnan(X), 2), :);  
col_std = std(X); 
X = X(:, col_std > 0); 
correlation_matrix = corr(X);

% 相关性矩阵
disp(correlation_matrix);
% 热力图
figure;
h = heatmap(variables, variables, correlation_matrix, 'Colormap', jet);
% 色条
colorbar;
% 标题
title('Correlation Heatmap of the Variables');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%散点图

data = readtable('C:\Users\A\Desktop\2024_happy.csv', 'VariableNamingRule', 'preserve');  
% 提取列
variables = {'Happiness_score', 'Economy_GDP_per_Capita', 'Social_support', ...
             'Healthy_life_expectancy', 'Freedom_to_make_life_choices', ...
             'Generosity', 'Perceptions_of_corruption'};
X = table2array(data(:, variables));
% 删除NaN
X = X(~any(isnan(X), 2), :);  % 删除包含NaN的行
% 标准差0
col_std = std(X); 
X = X(:, col_std > 0);  
% 相关性矩阵
correlation_matrix = corr(X);
% 显示相关性矩阵
%disp(correlation_matrix);
% 与Happiness_score相关性最高的变量
happiness_idx = find(strcmp(variables, 'Happiness_score'));  % 获取Happiness_score的列索引
correlation_with_happiness = correlation_matrix(happiness_idx, :);  % 计算Happiness_score与其他变量的相关性
% 找与Happiness_score相关性最高的变量除了Happiness_score
[~, max_corr_idx] = max(abs(correlation_with_happiness(2:end)));  % 获取相关性最大的变量索引（去除Happiness_score本身）
most_correlated_variable = variables{max_corr_idx + 1};  % 获取与Happiness_score最相关的变量名称


figure;
scatter(X(:, happiness_idx), X(:, max_corr_idx + 1), 'filled');  % 绘制Happiness_score与最相关变量的散点图
xlabel('Happiness Score');
ylabel(most_correlated_variable);
title(['Scatter plot of Happiness Score' most_correlated_variable]);
% 显示
disp(['The most correlated variable with Happiness_score is: ' most_correlated_variable]);
disp(['The correlation value is: ' num2str(correlation_with_happiness(max_corr_idx + 1))]);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%3D图

data = readtable('C:\Users\A\Desktop\2024_happy.csv', 'VariableNamingRule', 'preserve');  

% 从第6列选择影响因素（GDP、社会支持）
variables = data.Properties.VariableNames(6:end); 
X = table2array(data(:, 6:end));  
% 删除缺失值的行
X_clean = X(~any(isnan(X), 2), :); 
% 数据进行标准化（z-score标准化）
X_standardized = zscore(X_clean);
% PCA
[coeff, score, latent, ~, explained] = pca(X_standardized);
% 输出前几个主成分的贡献率
disp(explained);
% 选取占比最大的三个主成分
num_components = 3;  % 选择前三个主成分
selected_components = score(:, 1:num_components);  % 选择前三个主成分的得分
% K-means聚类
k = 3;  % 分为3个簇
[idx, C] = kmeans(selected_components, k); 
%%%%%%%%%%%%%%
figure;
h1 = scatter3(selected_components(idx == 1, 1), selected_components(idx == 1, 2), selected_components(idx == 1, 3), 50, 'r', 'filled'); 
hold on;
h2 = scatter3(selected_components(idx == 2, 1), selected_components(idx == 2, 2), selected_components(idx == 2, 3), 50, 'g', 'filled'); 
h3 = scatter3(selected_components(idx == 3, 1), selected_components(idx == 3, 2), selected_components(idx == 3, 3), 50, 'b', 'filled'); 
% 中心
h4 = plot3(C(:, 1), C(:, 2), C(:, 3), 'kx', 'MarkerSize', 12, 'LineWidth', 2); 

country_names = data.Country_name(~any(isnan(X), 2));  % 假设数据中包含一个'Country'列，存储国家名称
for i = 1:length(country_names)
    text(selected_components(i, 1), selected_components(i, 2), selected_components(i, 3), country_names{i}, 'FontSize', 8, 'HorizontalAlignment', 'right');
end

% 标题
title('K-means Clustering');
xlabel(['PrincipalComponent 1 (' variables{1} ')']);  % 显示PC1对应的原始变量
ylabel(['PrincipalComponent 2 (' variables{2} ')']);  % 显示PC2对应的原始变量
zlabel(['PrincipalComponent 3 (' variables{3} ')']);  % 显示PC3对应的原始变量

% 说明
legend([h1, h2, h3, h4], {'Cluster 1', 'Cluster 2', 'Cluster 3', 'Cluster Centers'}, 'Location', 'best');
hold off;
